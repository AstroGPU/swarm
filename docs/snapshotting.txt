Storing the current state of the system (snapshotting) in swarm
===============================================================
Mario Juric


* For now the only built-in snapshotting option we offer is to store the
  state of the system every user-specified time interval dT.  While 
  all integrators support this, the implementation in hermite-based
  integrators is by hand.  Other integrators like verlet use the 
  *generic_integrator* framework which makes this nearly automatic.

* ensemble structure has been extended with a 2D double precision array,
  Toutput, accessible via time_output(sys, k) method.  For each system, k=0
  values in this array give the desired time of the next snapshot. 
  Initially, these are all initialized to Tstart (the initial conditions). 
  k=1 values are the output intervals; that is, after a snapshot is made,
  the next snapshot time is calculated as Toutput(sys,0) = T(sys) + Toutput(sys,
  1).  The algorithm is such that a snapshot will be made on the first
  integration step that satisfies T>=Toutput(sys,0) (note that this does
  _not_ guarantee a snapshot at T==Toutput).

  While in principle the output intervals could be different for each system
  in the ensemble, for now we only allow a single output interval for all
  systems.  It is specified by the configuration key 'output interval'.  See
  swarm.cpp (around line 45) for exactly how it's done.

* To snapshot-enable your kernel, simply call output_if_needed(glog, ens, T,
  sys) from it, just before you will advance the system by a timestep.  Also
  call it just before exiting the kernel (to allow a final snapshot to be
  made, if needed).  output_if_needed() is defined in swarmlib.cu -- take a
  look what it does, and take a look at gpu_integ_driver() in the same file
  for how to use it.

* Snapshotting relies on the eventlog system to receive the snapshots (so go
  read docs/eventlog.txt if you already haven't).  It effectively does the
  following:

	int evtref = glog.log_event(EVT_SNAPSHOT, sys, T);
	glog.log_system(ens, sys, T, evtref);

  where log_system() simply calls log_body for each body. To locate a
  particular snapshot in the output files, first locate the EVT_SNAPSHOT
  event closest to the desired time, find its evtref and look up the
  corresponding bodies in the bodies.bin output file.

* Note that the snapshotting subsystem is orthogonal to other changes (e.g.,
  refactoring of kernels to use propagator/stopper interfaces).  It can be
  called from custom/optimized GPU kernels, as well as CPU code.
