swarm_scatter_demo(1)
=====================

NAME
---- 
swarm_scatter_demo - General demo program for running many n-body integrations.

SYMPOSIS
--------
*swarm_scatter_demo* [ -cfg <cfg directory/filename> ] [ -obs <list-of-times directory/filename> ] [ -ics <IC directory/filename prefix> ] [ -out <output directory/filename prefix> ]
Several parameters must be specified in the configuration file (.cfg). If no configuration file, including the directory, is specified, the cfg file is assumed to be ''$RUN/integrator.cfg'', where $RUN is the directory from which the swarm_scatter_demo is being executed. All options except for -cfg can also be specified in the configuration file, which supersedes the command line.  If no options are given, the default values given in swarm_scatter_demo.h or user.h are used. For this man page, assume that $RUN=$SWARMHOME/run.

Description
-----------
swarm_scatter_demo  -- Runs many n-body integrations with initial conditions generated by easyGen.py, swarm_scatter_demo.py, or throwBinaryGen.py.  An observation file must also be supplied.  This observation file is a single column list of times for which phase space data will be stored. The python scripts will create an observation file automatically when generating ICs (see below), but the file can also be generated separately. The output times need not have constant intervals. The demo code also uses the swarm utilities copy_from and accessor functions for formatting data output. For the configuration file, several parameters must be specified.  Each parameter must appear on its own line with the format: +
''key = value''

REQUIRED PARAMETERS
~~~~~~~~~~~~~~~~~~~

''integrator''::
   Specifies one of the following integrators: ''gpu_hermite'', ''gpu_hermite_adap'', ''gpu_rk4'', ''gpu_verlet'', ''cpu_hermite''

''min time step''::
   For adaptive time stepping, ''min time step'' is the minimum time step allowed.

''precision''::
   Specifies the precision for the integrations.  0 results in single precision and 1 in double.  Some integrators support additional values that allow  mixed-precision calculations.  For example, gpu_hermite and gpu_hermite_adap allow a value of 2, which calculates positions and velocities in double precision, but accelerations and jerks are calculated in single precision.

''runon''::
   Specifies either ''gpu'' or ''cpu''.  In the initial release, the values of runon and integrator must match.  In future relases, the CPU and GPU integrators may be merged.

''time step''::
  For the fixed time stepping, ''time step'' is the constant time step. _Not_ requried for gpu_hermite_adap.

''time step factor''::
   For adaptive time stepping, ''time step factor'' is the fraction of the timescale used in determining the time step.  

OPTIONAL PARAMETERS
~~~~~~~~~~~~~~~~~~~

''initial conditions''::
   File prefix, including the directory path, for the ICs.  For example, ''../scripts/ic/data'' will look for files called ''../scripts/ic/data.*'' for * in the range [0,n). Specifying this option will supersede the command line option ''-ics <IC filename prefix>''. The default for the distribution is ''$RUN/../scripts/ic/data''.

''list of times''::
   Filename, including directory path, that contains the list of times for which output will be generated.  Specifying this option will supersede the command line option ''-obs <observation filename>''. The default for the distribution is ''$RUN/../scripts/ic/observeTimes.dat''.

''output'':: 
   Specifies files to be used for built-in GPU logging.  _Only some integrators support this option at this time_. See *eventlog* for more information.

''out files''::
   File prefix, including the directory path, for the output files.  Specifying this option will supersede the command line option ''-ics <output filename prefix>''. The default for the distribution is ''$RUN/scatter_output''.  Note that this directory must be created by the user.

''output interval''::
   Specifies how often data should be logged using the built-in GPU logging. _Only some integrators support this option at this time_. See *eventlog* for more information.

''rmax''::
   Stop integration once a body reaches a distance greater than ''rmax''. _Only some integrators support this option at this time_.

''threads per block''::
   Specifies how many threads the GPU uses per block. _We recommend most users not set this explicitly, except when performing performance benchmarks._  Default value is 64 in the current release, but future releases will likely choose a good value of this parameter automatically.


EXAMPLE
-------

First, make the applications with 'make' and generate files specifying the initial conditions, e.g.
'cd scripts/ic; ./swarm_scatter_demo.py ; cd ../..`
'cd run; mkdir scatter_output; ../bin/swarm_scatter_demo -cfg integrator-scatter.cfg'',
where integrator-scatter.cfg contains the following:

[literal]
-----------------------------------
# swarm_scatter_demo cfg parameters
initial conditions = ../scripts/ic/data
list of times = ../scripts/ic/observeTimes.dat

#integration
integrator = gpu_hermite_adap
runon = gpu

# integrator-specific parameters
min time step = 1e-6
time step factor = 0.03
precision = 1

# GPU kernel configuration
threads per block = 64

# Output parameters
output = null
out files = ./scatter_output/scatter
-----------------------------------


Alternatively, one could use some command line options.  For example, ''../bin/swarm_scatter_demo -cfg integrator-scatter.cfg -ics ../scripts/ic/data -obs ./localObsTimeFile.dat'',
where integrator-scatter.cfg now contains the following:

[literal]
-----------------------------------
# swarm_scatter_demo cfg parameters

#integration
integrator = gpu_hermite_adap
runon = gpu

# integrator-specific parameters
min time step = 1e-6
time step factor = 0.03
precision = 1

# GPU kernel configuration
threads per block = 64

# Output parameters
output = null
out files = ../scatter_output/scatter
-----------------------------------


_NOTE_ that the user must ensure that the ICs have been made available and that the output directory has been created.  The user may choose to dump the output in the $RUN directory, but this could make for a messy directory. _Remember_, configuration file options supersede command line options.

OUTPUT
~~~~~~

The current output for swarm_scatter_demo writes a single line per system observation time, as specified by the list of times file.  The data are ordered as follows: 

[literal]
--------------------------------------------------------------------------
time_1 {for(i=0; i<N-1;++i){m_i x_i y_i z_i vx_i vy_i vz_i }} total_energy
time_2 {for(i=0; i<N-1;++i){m_i x_i y_i z_i vx_i vy_i vz_i }} total_energy
time_3 {for(i=0; i<N-1;++i){m_i x_i y_i z_i vx_i vy_i vz_i }} total_energy
.
.
.
time_N {for(i=0; i<N-1;++i){m_i x_i y_i z_i vx_i vy_i vz_i }} total_energy
--------------------------------------------------------------------------


INITIAL CONDITIONS
~~~~~~~~~~~~~~~~~~

The intial conditions can be generated by easyGen.py or throwBinaryGen.py (both in the $SWARMHOME/scripts directory) or swarm_scatter_demo.py (in the $SWARMHOME/scripts/ic directory). The user may wish to write his or her own IC generator.  In this case, the ICs must be formated as follows:

[literal]
---------------------------------
Total_number_of_bodies
Mass_1 x_1 y_1 z_1 vx_1 vy_1 vz_1
Mass_2 x_2 y_2 z_2 vx_2 vy_2 vz_2
Mass_3 x_3 y_3 z_3 vx_3 vy_3 vz_3
.
.
. 
Mass_N x_N y_N z_N vx_N vy_N vz_N
---------------------------------


LIMITATIONS & BUGS
------------------
See http://www.astro.ufl.edu/~eford/code/swarm/[website] for updated information on bugs.

RESOURCES
---------


Main Web site: <http://www.astro.ufl.edu/~eford/code/swarm/>

Google Group: <http://groups.google.com/group/swarm-ng>

COPYING
-------
Copyright \(C) 2008-2010 A. C. Boley + 
Free use of this software is granted under the terms of the GNU
General Public License (GPL) v3, which should be included as
link:gpl-3.0.txt[] and also avaliable
http://www.gnu.org/licenses/gpl-3.0.html[online].

