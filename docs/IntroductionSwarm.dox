namespace swarm {

/** \page IntroductionSwarm Introduction 

\section WhatIsSwarm What is Swarm-NG?
The Swarm-NG package helps scientists and engineers harness the power
of GPUs.  In the early releases, Swarm-NG will focus on the
integration of an ensemble of N-body systems evolving under Newtonian
gravity.  Swarm-NG does not replicate existing libraries that
calculate forces for large-N systems on GPUs, but rather focuses on
integrating an ensemble of many systems where N is small.  This is of
particular interest for astronomers who study the chaotic evolution of
planetary systems.  

\section ReleaseNote Release notes
<b>Version 1.0</b>
This will be the first stable release of swarm. 
In addition to optimized GPU kernels, it includes:
- A user friendly build environment (using CMake), 
- Comprehensive documentations (using Doxygen), 
- A test suite to ease development of new features and ensuring Swarm-NG is ready for science, and
- (TODO: add summary of) much more.

<b>Version 0.9.0</b>
This is a pre-release prior to the first stable release.
It includes many new features and major optimizations, including:
- Major performance improvements, including many optimizations for Fermi GPUs
- Completely new parallelization model, allowing efficient optimization of smaller ensembles
- Greater modularity thanks to templatized propagators, monitors and gravitation classes
- New propagators:  \ref gpu::bppt::MvsPropagator "mvs", \ref gpu::bppt::RkckPropagator "rkck" (both Fixed and Adaptive Timestep)
- Several example monitor classes
- (TODO: add summary of) much more.
This version is described in Dindar et al. 2012 (arXiv:1208.1157)

<b>Version 0.2.0</b>

This release added new GPU-based integrators for few-body systems.
Swarm-NG now includes:  \ref gpu::bppt::hermite "hermite", hermite_cpu, \ref gpu::bppt::rkck "rkck", \ref gpu::bppt::VerletPropagator "verlet", and \ref gpu::bppt::EulerPropagator "euler".

<b>Version 0.1.3</b>

This initial release contains GPU-based integrators for few-body
systems (hermite_gpu, hermite_cpu, verlet_gpu, verlet_cpu).
It comes with a basic, easy-to-use public interface for setting
initial conditions, calling the GPU-based integration algorithms and
accessing the output data.  Small example programs are provided to
demonstrate functionality and how to program with Swarm-NG.

\section QuickTips Quick Start Tips
<ul>
<li>Download swarm-NG:
	- Stable versin from http://www.astro.ufl.edu/~eford/code/swarm/download.html</li>
	- Latest development version from git stable branch at: 
https://github.com/AstroGPU/swarm
</li>

<li> Build the library and example programs:
	- For a quick build of swarm-NG, please see \ref BuildSwarm 
	"How to build swarm" for key steps.
	- For customized build of swarm-NG, please read \ref BuildSystem 
	"Build System" for instructions on how to set up compiler flags and select 
	specific components tailored to your needs.
</li>

<li> Test swarm-NG by 'make test'.  See \ref TestSwarm "How to test swarm" 
for more information.
</li>

<li> Run 'make benchmark' to check the speedup on your system. (Warning: This requires performing the integrations on both the CPU and GPU, so it may take a long time. Please be patient.) Please report your results at 
http://www.astro.ufl.edu/~eford/code/swarm/submit_benchmark.html
</li>

<li> Read the <a href="http://www.astro.ufl.edu/~eford/code/swarm/doxygen/">online reference manual</a> (you can generate a local copy with 'make doc'). The additional documentation in text format is available in "docs" subdirectory.
</li>

<li> We provide "swarm" executable as an interface to use swarm-NG library.
	- For help on using the swarm executable as it is, please read <a href="SwarmExec.html">swarm executable</a>. 
	- For help creating a test file of initial conditions, see <a href="TextFormat.html">Text Format</a>.
</li>

<li> To learn how to utilize the Swarm-NG library in your own code, please work
  through the series of introductory tutorials in src/tutorials (in
  the following order):
 	- \ref TutorialBeginner
 	- \ref TutorialGPU
	- \ref TutorialPropagator 
	- \ref TutorialIntegrator  An integrator class implements a GPU kernel function (kernel) that integrates all active systems in an ensemble systems (often for many timesteps).  While potentially more efficient than the same algorithm written as a propagator, writing an integrator requires more familiarity with GPU programming.
        - \ref TutorialMonitor
</li>

<li> Several example applications are provided to show how to use swarm-NG. Please take a look at the following applications:
<ul>
<!-- <li> swarm_scatter_demo.cpp:  example that considers
  the effect of passing stars on planetary system.  More Info at link:swarm_scatter_demo.html[]</li> -->
<li> src/tutorials/montecarlo*.cpp: these examples demonstrate how to initial an ensemble from C++ code, integrate the ensembles using the GPU and perform a basic analysis of the results.
     - \ref montecarlo.cpp
     - \ref montecarlo_ecclimit.cpp
     - \ref montecarlo_mcmc_outputs.cpp
</li>
</ul>
</li>

<li> For ambitious developers, please read the following for more information 
on how to write your own programs using the swarm-NG library:
<ul>
<li> \ref for_developers for an overview on how to write your own code 
that builds on Swarm-NG functionality.</li>
<li> link:eventlog.html[] and link:snapshotting.html[] for information on using the
   swarm output system.</li>
</ul>
</li>


*/

}
