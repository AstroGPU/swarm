Getting Started Guide for Swarm-NG Developers
=============================================
Swarm-NG Development Team
v0.1, April 2010: Initial release + 
Swarm-NG v0.1 (c) Swarm-NG Development Team 2010

Developing with the swarm-NG library (as is)
--------------------------------------------

Overview of public interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* swarm:: namespace for the swarm-NG library

* swarm::ensemble:: an abstract base type for storing an ensemble of
  n-body systems.  Provides funtions to get and set mass and position
  of each body in each system, as well as other common operations.

** swarm::cpu_ensemble: derives from ensemble, provides functionality
   for ensembles stored on CPU.  Provides 'copy_from(const gpu_ensemble &)'.

** swarm::gpu_ensemble: derives from ensemble, provides functionality
   for ensembles stored on GPU.  Provides 'copy_from(const cpu_ensemble &)'.

* swarm::integrator:: An abstract base class with a virtual integrate() method

* swarm::config:: class for passing configuration parameters to swarm
  library, integrators (including "propagator" and "stopper", and the
  swarm logging system.  See link:configuration_file.html[] for
  information about various parameters.

** swarm::get_config:: reads a configuration file into a swarm::config object

** swarm::load_ensemble:: reads a series of data files into a cpu_ensemble


1. Configuration class
^^^^^^^^^^^^^^^^^^^^^^^^

Configuration can be either directly set in your program or loaded
from the cfg file. + 
Refer to link:configuration_file.html[configuration file] for the
formats of parameters.

*setting in source code*
--------------------------------
  swarm::config cfg;
  cfg["integrator"] = "gpu_hermite";     // integrator name
  cfg["runon"] = "gpu";                  // whether to run on cpu or gpu (must match integrator)
  cfg["precision"] = "1";                // use double precision
  cfg["integration end"] = "1.";         // stop integrations one reah this time
  cfg["time step"] = "0.001";            // time step required by gpu_hermite
--------------------------------

*loading from file*
--------------------------------
  std::string icfgfn = argv[1];           // sets configuration file name from 1st command line arguement 
  swarm::config cfg;                      // initializes cfg
  swarm::load_config(cfg,icfgfn)          // loads configuration file name
--------------------------------

Each parameter appears on its own line of the configuration file in a
format ''key = value'', such as 
--------------------------------
integrator = gpu_hermite
runon = gpu
precision = 1
integration end = 1.
time step = 0.001
--------------------------------

2. SWARM library initialization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This is required before calling any (non-utility) swarm library function.
Currently, it only initializes the swarm logging system
--------------------------------
  swarm::init(cfg);
--------------------------------

3. CPU Ensemble initialization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A CPU ensemble can be either initialzied directly by your program or loaded
on host to be used with integrators.

*initialization*
--------------------------------
  unsigned int nsystems = cfg.count("num_systems") ? atoi(cfg.at("num_systems").c_str()) : 1024;  
  unsigned int nbodyspersystem = cfg.count("num_bodies") ? atoi(cfg.at("num_bodies").c_str()) : 3;
  swarm::cpu_ensemble ens(nsystems, nbodyspersystem);  // allocates memory for ens to hold nsystems systems each containing nbodyspersystem bodies
--------------------------------

In this case, you would still need to set the initial conditions using
the ensemble member functions.  You can set the mass and coordinates
of a body using the ensemble::set_body function
--------------------------------
      ens.set_body(sys, bod, mass, x, y, z, vx, vy, vz);
--------------------------------

where sys specifies the system index (starting at 0), bod specifies
the body index (starting at 0), mass is the body's mass, and x, y, z,
vx, vy, and vz specicfy the position and velocity of the body.
ensemble provides additional functions to ease access to this data.
See the
http://www.astro.ufl.edu/~eford/code/swarm/doxygen/classswarm_1_1ensemble.html[referene
manual entry for ensemble] for details.

*loading*
--------------------------------
  // will look for a sequencce of files containing initial conditions
  // for each system with this common prefix retreived from the
  // configuration class cfg
  std::string ensprefix;                 
  swarm::get_config(ensprefix, cfg, "initial conditions");
  swarm::cpu_ensemble ens;                // initialize empty cpu_ensemble
  swarm::load_ensemble(ensprefix, ens);   // allocate memory and reads in initial conditions based on initial conditions files
--------------------------------

If "initial conditions" is set to ''data'', then load_ensemble would
look for files with the names ''data.0'', ''data.1'', ''data.2'',
etc. in the current directory.  Each of those initial conditions file
must be formated as follows:

[literal]
---------------------------------
Total_number_of_bodies
Mass_1 x_1 y_1 z_1 vx_1 vy_1 vz_1
Mass_2 x_2 y_2 z_2 vx_2 vy_2 vz_2
Mass_3 x_3 y_3 z_3 vx_3 vy_3 vz_3
.
.
. 
Mass_N x_N y_N z_N vx_N vy_N vz_N
--------------------------------


4. Integrator initialization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You initialize an integrate with the configuration class, like
--------------------------------
  std::auto_ptr<integrator> integ(integrator::create(cfg));
--------------------------------

Each integrator provides a factory funcction of the form
  'extern "C" integrator *create_XXXXX(const
  config &cfg)', where XXXX is the name of the integrator.
  That factory funtion returns an instance of the integrator when called.  
  integrator::create will figure out which factory to call based
  on the data in cfg.

5. Setting end times
^^^^^^^^^^^^^^^^^^^^
Set end times of integration
--------------------------------
  ens.set_time_end_all(10.);   // sets all integrations to stop at time 10.
--------------------------------

or you could do

--------------------------------
  double Tend;
  swarm::get_config(Tend, cfg, "integration end");
  for(int sys = 0; sys != ens.nsys(); sys++)
      ens.time_end(sys) = Tend;

--------------------------------

6. GPU Ensemble initialization (including upload)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you want to perform an integration using a GPU, then you must
initialize a gpu_ensemble.  This is normally done based on an existing
cpu_ensemble object.  (If you are not using a GPU, then skip this step.)

--------------------------------
   swarm::gpu_ensemble gpu_ens(ens);	// initializes and uploads data from ens into GPU's memory
--------------------------------

Data can also be transfered from a cpu_ensemble to a gpu_ensemble
using the 'gpu_ensemble(const cpu_ensemble &source)' function.

7. Performing the integration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To integrate the systems in your ensemble to time Tend, 
use the integrate function of the pointer you retreived in step 4.
If cfg specified a cpu integrator, then you'd pass a cpu_ensemble.
--------------------------------
  integ->integrate(cpu_ens, Tend);
--------------------------------

If cfg specified a cpu integrator, then you'd pass a cpu_ensemble to integrate.
--------------------------------
  integ->integrate(gpu_ens, Tend;);
--------------------------------

Note that gpu integrators integrate the data on the GPU.  So you will
need to make sure that you have uploaded the coordinates of the
systems that you would like to integrate from the CPU to the GPU
before calling integrate.  In most cases, you will want to download
the data from the GPU back to the CPU for analysis (see next step).

8. Downloading data from the GPU
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have a cpu_ensemble object ens and a gpu_ensemble object gpu_ens,
then you can download the data from the GPU to the CPU with
--------------------------------
  ens.copy_from(gpu_ens);             
--------------------------------
If you used a CPU integrator, then you should skip this step.


9. Accessing the state of the systems
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can access data stored in a cpu_ensemble via numerous member
functions of ensemble.  For example, the tutorials use a function like

--------------------------------
void print_selected_systems_for_demo(swarm::ensemble& ens)
{
  using namespace swarm;
  for(unsigned int systemid = 0; systemid< ens.nsys(); ++systemid)
    {
      std::cout << "sys= " << systemid << " time= " << ens.time(systemid) << " nsteps= " << ens.nstep(systemid) << "\n";
      for(unsigned int bod=0;bod<ens.nbod();++bod)
	{
	  std::cout << "body= " << bod << ": mass= " << ens.mass(systemid, bod);
	  std::cout << " position= (" << ens.x(systemid, bod) << ", " <<  ens.y(systemid, bod) << ", " << ens.z(systemid, bod) << ")";
	  std::cout << " velocity= (" << ens.vx(systemid, bod) << ", " <<  ens.vy(systemid, bod) << ", " << ens.vz(systemid, bod) << ").\n";
	}
    }
  std::cout.flush();
}
--------------------------------

For more functions to access the data, see the
http://www.astro.ufl.edu/~eford/code/swarm/doxygen/classswarm_1_1ensemble.html[referene
manual entry for ensemble].


10. Using the swarm logging system
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Swarm includes an easy to use logging system.  To activate it, use the
''output'' and ''output interval'' keywords (either in your code or
via a parameter file) before calling the integrator.

*initialization*
--------------------------------
  swarm::config cfg;
  cfg["output"] = "binary log";     // specifies output style and file prefix
  ...
  double Toutputstep;
  swarm::get_config(Toutputstep, cfg, "output interval");
  for(int sys = 0; sys != ens.nsys(); sys++)
  {
          ens.time_output(sys, 0) = ens.time(sys); // time of next output, i.e., output immediately on start
          ens.time_output(sys, 1) = Toutputstep;   // interval between output
  }
--------------------------------

*loading from file*
Use load_cfg as before, but with a configuration file that includes
--------------------------------
  output = binary log.bin
  output interval = 0.1
--------------------------------

This will result is swarm storing data to an output file log.bin.
The data can then be accessed via the link:swarmquery.html[swarmquery] program
or user programs that make use of the swarmdb and gpulog classes.  


Querying binary files written by the Swarm logging system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The swarmdb and gpulog classes are still experimental and documtation will be forthoming.

For more information on the swarm logging system, see link:eventlog.html[] 
link:snapshotting.html[].


Adding to to the the swarm-NG library
-------------------------------------

How to add your own integrator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To add a new integrator, follow the following simple steps:

- create a subdirectory integrators/<integrator_name>

- place any source files your integrator requires to that subdirectory

- create a Makefile.mk file there, based on example Makefile.mk files
  found with other integrators (e.g., look at
  integrators/euler/Makefile.mk)

Your integrator must:

- derive from 'integrator' class, and override one its virtual
  integrate() methods.

- provide an 'extern "C" integrator *create_XXXXX(const config &cfg)'
  function (where XXXX is the name of the integrator) that will return
  an instance of the integrator when called. Example:
------------------
        // factory
        extern "C" integrator *create_gpu_euler(const config &cfg)
        {
                return new gpu_euler_integrator(cfg);
        }
------------------

- there are additonial requirements for your integrator to work with
  the gpulogging systems.

Note that we're trying to shift all integrators to use the generic
integrator framework (see verlet, rk4 or rkck).  In this framework you
merely define a "propagator" for your new integrator.  See the euler
or rk4 integrators for simple examples.  

Generic_Integrator Framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To be written


Contributing to the the swarm-NG library
----------------------------------------

Overview of private interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We're likely to change the private interfaces in subsequent releases.
Thus, we strongly encourage people not to use the private interface,
without coordinating with the swarm-NG development team.



LIMITATIONS & BUGS
------------------
As noted in the README.txt:

- swarm is limited to N-body systems with 3-10 bodies.

- swarm only integrates forward in time.

- While there are euler, rk4 and rkck integrators, they are in a preliminary
  form and should not be used.  While there are files for mvs, it is 
  merely a template at this point

- E.g., rk4 requires exactly 3 bodies and does not include a cpu version

- For an updated list, visit the
  http://www.astro.ufl.edu/~eford/code/swarm/[Swarm-NG Website]

See http://www.astro.ufl.edu/~eford/code/swarm/[website] for updated information on bugs.


RESOURCES
---------

Other Online Documentation: <http://www.astro.ufl.edu/~eford/code/swarm/docs/>

Online Reference Manual: <http://www.astro.ufl.edu/~eford/code/swarm/doxygen/>

Main web site: <http://www.astro.ufl.edu/~eford/code/swarm/>

Google Group: <http://groups.google.com/group/swarm-ng>


COPYING
-------
Copyright \(C) 2010 Eric B. Ford and the Swarm-NG Development Team + 
Free use of this software is granted under the terms of the GNU
General Public License (GPL) v3, which should be included as
link:gpl-3.0.txt[] and also avaliable
http://www.gnu.org/licenses/gpl-3.0.html[online].


