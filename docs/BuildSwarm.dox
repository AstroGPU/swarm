namespace swarm {

/** \page BuildSwarm How to build swarm


\section Obtain Obtaining Swarm
You can obtain Swarm source codes in two different ways:

- Checkout the latest versios from Git Repository using following command
\verbatim
$ git clone git://gitorious.org/astrogpu/swarm.git
\endverbatim

- Download the stable version from <a href="http://www.astro.ufl.edu/~eford/code/swarm/download.html">download page</a>

\section Pre Pre-requisites
Minimum Hardware requirements:
 - 64-bit Linux system
 - nVidia GPU with compute capabality 1.3 or above (GT200 and Fermi architecture)

Required software packages:
 - <a href="http://developer.nvidia.com/cuda-downloads">CUDA Toolkit</a> 3.2 or later 
 - <a href="http://www.boost.org/">Boost</a> 1.33 or later (including program_options, regex)
 - <a href="http://www.cmake.org/">CMake</a> 2.8 or later
 - <a href="http://www.doxygen.org/">Doxygen</a> (optional)

Installing required packages on Ubuntu
 - Download and Install CUDA Toolkit SDK for Ubuntu from <a href="http://developer.nvidia.com/cuda-downloads">CUDA Downloads</a>
 - Install the rest of packages using following command:
\verbatim
sudo apt-get install cmake libboost-dev libboost-regex-dev libboost-program-options-dev doxygen cmake-gui
\endverbatim


\section Build Step-by-Step building

\subsection s1 Step 1: Initialize CMake
Change into source directory and execute the following command:
\verbatim
$ cmake .
\endverbatim
CMake will try to automatically find required packages if they are installed in default location, otherwise it will give you 
error messages about missing packages.

\subsection s2 Step 2: Configure Variables and Paths

You may need to change these variables for CMake for compiling properly:

 - \c Boost_INCLUDE_DIR      : Path where Boost headers are installed. [/usr/include/]
 - \c CUDA_TOOLKIT_ROOT_DIR  : Path to the CUDA SDK [/usr/local/cuda, /opt/cuda]
 - \c MAX_NBODIES            : Maximum number of bodies supported by Swarm [3..10]
 - \c ENSEMBLE_WARPSIZE      : Warpsize for coalesced global memory reads (advanced) [4,8,16,32,64]
 - \c SHMEM_WARPSIZE         : Warpsize for coalesced shared memory reads (advanced) [4,8,16,32,64]

To change any of the above variables use any of following methods:
 - If CMake GUI is installed and you have X server running, to see a list of variables in a GUI window, type:
 \verbatim cmake-gui . \endverbatim
 - If CMake GUI is installed but no X server access is available, to see a list of variables in an console application type:
 \verbatim ccmake . \endverbatim
 - Open \c CMakeCache.txt with a text editor and find the variable and change it
 - To set value of &lt;var&gt; to &lt;value&gt;, type:
 \verbatim cmake . -D<var>=<value> \endverbatim

\subsection s3 Step 3:  Generate Makefiles
After you set the variables to desired values, run \verbatim cmake . \endverbatim 
again to generate the Makefiles.

You may check that Makefiles are present by typing \verbatim make help \endverbatim

\subsection s4 Step 4: Build 
To build Swarm type: \verbatim make \endverbatim
It may take a while to build the binaries.

If you need documentation, use the following command:
\verbatim make doc \endverbatim

\subsection s5 Step 5: Tests

Once the build is done, you can test the installation using:
\verbatim make test \endverbatim

If you want to test the computational capacity of your system try:
\verbatim make benchmark \endverbatim



*/

}
