namespace swarm {

/** \page BuildSwarm Getting Started with Swarm-NG


\section Obtain Obtaining the source code
Currently we do not have any binary packages available. 
You can obtain Swarm source codes in two different ways:

- Download the stable version from <a href="http://www.astro.ufl.edu/~eford/code/swarm/download.html">download page</a>

- Checkout the latest development version from Git Repository using the following command:
\verbatim
$ git clone  git@github.com:AstroGPU/swarm.git
\endverbatim
If you want to download the stable version from git, use this command:
\verbatim
$ git clone -b stable  git@github.com:AstroGPU/swarm.git
\endverbatim

\section Pre Pre-requisites
Minimum Hardware requirements:
 - 64-bit CPU
 - 2GB Memory
 - nVidia GPU with compute capabality 1.3 or above (GT200 and Fermi architectures; some features require compute capability 2.0)

Software Requirements:
 - 64-bit Linux (tested on Ubuntu and RHEL)
 - Latest CUDA drivers (should match CUDA SDK)
 - <a href="http://developer.nvidia.com/cuda-downloads">CUDA Toolkit</a> 3.2 or later 
 - GCC 4.x (Refer to your CUDA Toolkit manual for the correct version of GCC)
 - <a href="http://www.boost.org/">Boost</a> libraries 1.33 or later (including program_options, regex)
 - <a href="http://www.cmake.org/">CMake</a> 2.8 or later

Optional software dependencies:
 - <a href="http://www.doxygen.org/">Doxygen</a> 
 - CMake GUI (cmake-gui)
 - Console CMake (ccmake)

Python development requirements:
 - Boost Python module
 - Python 2.5 or later development headers

Installing required packages on your system, here we take Ubuntu as an example:
 - Download and Install CUDA Toolkit SDK and CUDA Development Drivers for Ubuntu from <a href="http://developer.nvidia.com/cuda-downloads">CUDA Downloads</a>
 - Install CMake:
\verbatim
sudo apt-get install cmake libboost-dev libboost-regex-dev libboost-program-options-dev 
\endverbatim
 - For generating documentation and using the CMake graphical user interface, 
install doxygen and cmake-gui:
\verbatim
sudo apt-get install doxygen cmake-gui
\endverbatim
 - Install Python:
\verbatim
sudo apt-get install libboost-python-dev python-dev
\endverbatim

\section Compilation

Compilation of Swarm comprises two steps - Configuration and Compilation. 
Swarm uses <B>CMAKE</B> system for both. The following instructions are 
for a quick build of Swarm. \ref BuildSystem "Build System" describes more advanced 
configuration and compilation settings. 

\subsection configure Configure your building environment
The configuration process allows you to adjust the default compiling options. 
There are three options to do CMAKE configuration: Command-line, Console, 
and GUI. Here we discuss Console approach. Command-line and GUI options are 
described in \ref BuildSystem "Build System". 

 - Create a directory for make files and binaries - &lt;build directory&gt;

 - Change to the &lt;build directory&gt; and type this command:
\verbatim
ccmake <source directory>
\endverbatim
ccmake command is a console user interface for CMAKE; &lt;source directory&gt;
is the top directory of swarm. 

 - Press "c" to configure. If there are errors, press "e" to go to the 
variable editing page and fix the indicated problem(s) and start over. You may 
need to set the following variables to their correct values for swarm to 
compile properly:
     - \c Boost_INCLUDE_DIR      : Path where Boost headers are installed. [/usr/include/]
     - \c CUDA_TOOLKIT_ROOT_DIR  : Path to the CUDA toolkit [/usr/local/cuda, /opt/cuda]

 - Once configuration succeeds without errors, press "e" to exit configuration 
page and then press "g" to generate the make files. If no error, do:
\verbatim
cmake .
\endverbatim

\subsection compile Compile swarm

 - To compile and build executables and libraries, type: 
\verbatim make 
\endverbatim
It may take a while to compile CUDA files.

 - If you need documentation, use the following command to generate the whole 
set of documentation:
\verbatim make doc \endverbatim

\section Test Tests and Benchmarks

Once compilation is done, you can test the installation using:
\verbatim make test \endverbatim

If you want to test the computational capacity of your systemm, do:
\verbatim make benchmark \endverbatim



*/

}
