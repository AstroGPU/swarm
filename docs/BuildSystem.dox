namespace swarm {

/** \page BuildSystem  Advanced Options for Building Swarm


Swarm provides options in both configuration and complilation stage. 
In configuration, CMake tries to automatically find required packages
if they are installed in default locations. You may override the default
values using CMake tools. You may select specific compile time options to
build the swarm components that you desire. Here we discuss the CMake 
tools for configuration and the advanced compiling options. 

\section cmakeconfig Configration Tools
In \ref BuildSwarm "How to build swarm" we discussed one of the configuration
tools by using <b>Console</b>. Here we show two other options. 

\subsection commandline Configuration using CMake command line

Change into the &lt;build directory&gt; and execute the following command:
\verbatim
cmake <source directory>
\endverbatim

It may give error messages if it couldn't find the required packages in their 
default locations. You can fix the errors by editing the file 'CMakeCache.txt' 
that cmake generates in the &lt;build directory&gt; and repeat this process 
until there are no more error messages. 

\subsection gui Configuration using CMake GUI
CMake GUI is an X11 interface to CMake. To run CMake GUI, you need an X server running 
on your local machine.

To get started, change into the build directory and type this command:
\verbatim
cmake-gui <source directory>
\endverbatim

Click on "Configure" button, in the dialogs that follow, select the default options.
CMake will check the configuration and show the error messages if any in red text 
in the bottom pane. Change the variables according to \ref CMake. Click on "Configure" 
again to apply changes. Repeat this procedure until there are no more errors.

Click the "Generate" button when you are done and Makefiles will be generated. You can 
then close the GUI window using the "Close" button.

\section configuration Configuration Options

\subsection codegen Compile-time constants
<table>
<tr>
<th>Variable </th><th>Description </th><th>Acceptable Values </th><th>Default value </th></tr>
<tr>
<td><em>MAX_NBODIES</em> </td><td>Maximum number of bodies per system </td><td>3..10 </td><td>3 </td></tr>
<tr>
<td><em>NUM_PLANET_ATTRIBUTES<br/>
NUM_SYSTEM_ATTRIBUTES</em> </td><td>Number of attributes per planet and system, respectively. The attributes are used for application specific values that need to be stored per planet or per system </td><td>1..10 </td><td>1 </td></tr>
<tr>
<td><em>SHMEM_CHUNK_SIZE<br/>
ENSEMBLE_CHUNK_SIZE</em> </td><td>The chunk size setting for data structures stored in shared memory and the ensemble data structure. Higher chunk-size aids coalesced reads. However, higher shared-memory chunk size are not available for larger number of bodies. </td><td>1,4,8,16,32 </td><td>Automatic based on MAX_NBODIES </td></tr>
</table>

\subsection compiler Compiler options

<table>
<tr>
<th>Variable </th><th>Description </th><th>Default value </th></tr>
<tr>
<td><em>CMAKE_CXX_COMPILER<br/>
CMAKE_C_COMPILER</em> </td><td>To specify the path for C++ and C compilers on your system. Swarm has been tested with GNU g++ and gcc compilers. You are free to try other compilers and report the results back to us. </td><td>c++<br/>
cc </td></tr>
<tr>
<td><em>CMAKE_EXE_LINKER_FLAGS</em> </td><td>Flags for that are passed to the linker. Normally not needed </td><td></td></tr>
<tr>
<td><em>CMAKE_CXX_FLAGS<br/>
CMAKE_C_FLAGS</em> </td><td>to specify the compiler flags during the compilation. For example: -g for debugging, -O for the level of optimization. Please consult your compiler manual for the details. </td><td></td></tr>
</table>


\subsection cuda CUDA related options
<table>
<tr>
<th>Variable </th><th>Description </th><th>Default value </th></tr>
<tr>
<td><em>GENERATE_FERMI</em> </td><td>to generate CUDA binaries for Fermi (Geforce 400 series) architecture, check this option only if you have a Fermi card in your system. </td><td>ON </td></tr>
<tr>
<td><em>GENERATE_GT200</em> </td><td>to generate CUDA binaries for GT200 architecture(Geforce 200 series), check this option only if you have a GT200 card in your system. </td><td>OFF </td></tr>
<tr>
<td><em>GENERATE_KEPLER</em> </td><td>to generate CUDA binaries for Kepler architecture(Geforce 600 series), check this option only if you have a Kepler compatible card in your system. [Experimental, not thoroughly tested]</td><td>OFF </td></tr>
<tr>
<td><em>CUDA_TOOLKIT_ROOT_DIR</em> </td><td>The directory where CUDA toolkit is installed. Useful when multiple version of CUDA are installed on one system </td><td>/usr/local/cuda </td></tr>
</table>
  

\subsection other Miscellaneous options

<table>
<tr>
<th>Variable </th><th>Description </th><th>Default value </th></tr>
<tr>
<td><em>CMAKE_VERBOSE_BUILD<br/>
CUDA_VERBOSE_BUILD</em> </td><td>to print out compile details during the build process. You may set turn it ON to see the details of compilation to aid debugging when compilation fails. </td><td>OFF<br/>
OFF </td></tr>
</table>

\subsection plugin Plugin management

Variables that begin with *PLUGIN_* are used to control compilation of plugins. Widely-used plugins are enabled by default. It is advised for the user to turn off 
unused plugins to reduce compilation time.


\section testing Testing options

Since testing is done through CTest, the CMake testing system. Testing parameters are to be set using CMake variables. These variables
are used when issuing a "make test" command.

 <table>
<tr>
<th>Variable </th><th>Description </th></tr>
<tr>
<td><em>TEST_integrator_nbod</em> </td><td>Enable testing integrators with different number of bodies </td></tr>
<tr>
<td><em>TEST_integrator_nbod_list</em> </td><td>List of configurations for integrators to be tested.(must correspond to files in test/integrators/*.cfg) </td></tr>
<tr>
<td><em>TEST_monitors_nbod</em> </td><td>Enable testing monitors with different number of bodies </td></tr>
<tr>
<td><em>TEST_stability</em> </td><td>Enable stability test for long-term integrations </td></tr>
<tr>
<td><em>TEST_stability_list</em> </td><td>List of configurations for integrators to be tested.(must correspond to files in test/integrators/*.cfg) </td></tr>
<tr>
<td><em>TEST_stability_duration</em> </td><td>Duration of the integration for stability test </td></tr>
<tr>
<td><em>TEST_stability_nsys</em> </td><td>Number of systems to integrator for the stability test </td></tr>
</table>


\subsection makeall Build all executables and libraries

To make all swarm executables and swarm-ng libraries in one step, do:

\verbatim
  make all
\endverbatim

\subsection maketarget Make individual components

We provide options to build individual components, documentations, and tutorials. To 
see a list of options, type:

\verbatim
  make help
\endverbatim

It lists all the options that you can use with 'make' to build the components
you desire. For example, 

 - to generate all the documentations, do (Doxygen is required for this option):

\verbatim
  make doc
\endverbatim


 - to build benchmark, do:

\verbatim
  make benchmark
\endverbatim



*/

}
