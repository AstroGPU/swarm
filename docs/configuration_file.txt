Format/rules for configuration file
===================================

Description
-----------
<<<<<<< HEAD:docs/configuration_file.txt
.What is configuration file?
The configuration file specifies several runi-time parameters. Examples are located in `run/integrator.cfg`
=======
.What is a configuration file?
The configuration file specifies several parameters, including:  
- <<anchor-1,choice of integrator and other required parameters>>
- <<anchor-2,optional parameters to integrator>>
- <<anchor-3,parameters specifying initial conditions>>
- <<anchor-4,parameters specifying conditions to halt integrations>> (optional)
- <<anchor-5,parameters to output logging system>> (optional)
- <<anchor-6,GPU control parameters>> (optional)

For some programs, the configuration file also controls the initial conditions. +
Examples are located in `run/integrator*.cfg`
>>>>>>> eford:docs/configuration_file.txt

.Format for the configuration file
Each parameter appears on its own line with a format: + 
''key = value''

[horizontal]
<<<<<<< HEAD:docs/configuration_file.txt
<<anchor-1,Required parameters>>:: Commonly required parameters ''integrator'', ''runon'', ''num_systems'', ''num_bodies'', ''dT''
<<anchor-2,Integrator-specific parameters>>:: Integrator specific parameters ''h'', ''min time step'', ''time step factor'', ''precision''
<<anchor-3,Initial condition parameters>>:: Users specify initial conditions using ''initial conditions''
<<anchor-4,Stopper parameters>>:: Optional
<<anchor-5,GPU kernel configuration parameters>>:: Optional
<<anchor-6,Output parameters>>:: Optional
=======
<<anchor-1,Required parameters>>:: Currently the following parameters are required (for all programs that accept a configuration file): ''integrator'', ''runon'', ''integration end''
<<anchor-2,Integrator-specific parameters>>:: Integrator specific parameters ''time step'' (fixed timestep algorithms), ''time step factor'' and ''min time step'' (adaptive timestep algorithms), ''precision'' (hermite_gpu and hermite_cpu only)
<<anchor-3,Initial condition parameters>>:: User-specified initial conditions (e.g., ''initial conditions'', ''num_systems'', ''num_bodies'')

<<anchor-4,Stopper parameters>>:: Optional (e.g., ''rmax'')
<<anchor-5,GPU kernel configuration parameters>>:: Optional ''threads per block''
<<anchor-6,Output parameters>>:: Optional ''output'', ''output interval''

>>>>>>> eford:docs/configuration_file.txt

[[anchor-1]]
REQUIRED PARAMETERS
~~~~~~~~~~~~~~~~~~~
''integrator''::
   Must specify one of the following integrators: ''gpu_hermite'', ''gpu_hermite_adap'', ''gpu_rk4'', ''gpu_verlet'', ''cpu_hermite''

''runon''::
   Must specify either ''gpu'' or ''cpu''.  In initial release, the values of runon and integrator must match.  In future releases, the CPU and GPU integrators may be merged

''integration end''::
   Must specify the time at which each integration will be stopped.  Swarm-NG uses unit systems where G=1.  Integrations are halted once the integration time reaches T*2pi.  Thus, the input value of dT corresponds to years, if masses are specified in solar masses and distances in AU.

Additional parameters may be required by specific programs.

[[anchor-2]]
INTEGRATOR-SPECIFIC PARAMETERS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<<<<<<< HEAD:docs/configuration_file.txt
And either ''h'' or ''time step factor'':

''h''::
   Specify the timestep for fixed time-step algorithms.

''time step factor''::
   Specifies the time step parameter for the integrator ''gpu_hermite_adap''.  

''min time step''::
   Specifies the minimum time step for the integrator ''gpu_hermite_adap''.  

''precision''::
   Must specify the precision for the integrations.  0 results in single precision, 1 results in double precision.  Some integrators support additional values that result in mixed-precision calculations.  For example, gpu_hermite allows a value of 2, which results in positions and velocities being calculated in double precision, but accelerations and jerks being computed in single precision.


=======
Constant time step algorithms (e.g., hermite, rk4) must specify:
''time step''::
  For the fixed time stepping, ''time step'' is the constant time step.

Variable time step algorithms (e.g., verlet, hermite_adap) must
specify both of the following:
''time step factor''::
   For adaptive time stepping, ''time step factor'' is the fraction of
   the timescale used in determining the time step.

''min time step''::
   For adaptive time stepping algoritms, ''min time step'' is the
   minimum time step allowed.  Currently only supported by the highly
   beta hermite_adap_gpu.

Certain integrators have additional parameters:
''precision'' (currently hermite integrators only)::
   If you are using hermite_gpu (or the currently super-beta
   hermite_adap_gpu), then you must specify the precission for
   integrations.  A value of 1 results in double precission, 2 results
   in single precission, and 3 results mutli-precission calculations.
   (E.g., gpu_hermite allows a value of 3 which results in positions
   and velocities being calculated to double precission, but
   accelerations and jerks being computed in single precission.)  This
   parameter is ignored by other integrators (which are currently
   implemented using only double precision.)

''steps per kernel run'' (optional)::
  Specifies the maximum number of steps per kernel call.  Currently,
  defaults to 100.  Not currently supported by hermite integrators.
>>>>>>> eford:docs/configuration_file.txt

[[anchor-3]]
PARAMETERS TO SPECIFY INITIAL CONDITIONS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<<<<<<< HEAD:docs/configuration_file.txt
In the case of swarm_tutorial_montecarlo, users specify initial conditions in terms of the mass of a central body and Keplerian orbital elements for each of 2-9 additional bodies.  

''use_jacobi''::
   A non-zero value specifies that all orbital elements are to be interpreted in a Jacobi frame.  Default value is 0 (false).  

''mass_star''::
   The mass of body zero, the central object.  For planetary systems, this is typically the host star.  Default value is 1.

''mass_[1-9]''::
   The mass of the specified body.  Valid range is [0,mass_star).  (Body #0 is the central body.)

''a_[1-9]''::
   The initial semi-major axis of the specified body.  Valid range is [0.001,10000.].

''ecc_[1-9]''::
   The initial eccentricicty of the specified body.  Valid range is [0,1).

''inc_[1-9]''::
   The initial inclination of the specified body in degrees.  Valid range is [-180,180].    

''node_[1-9]''::
   The initial ascending node of the specified body in degrees.  Valid range is [-720,720].    

''omega_[1-9]''::
   The initial arguement of periastron of the specified body in degrees.  Valid range is [-720,720].    

''meananom_[1-9]''::
   The initial mean anomaly of the specified body in degrees.  Valid range is [-720,720].    

Using only the above keywords would result in all systems being assigned the same initial conditions.  While this may be useful for some tests, most real calculations will want to assign different initial conditions to each system.  To generate initial conditions via a pseudo-random number generator, replace at least one of the above key names for the mass and orbital elements of one or more bodies with a similar keyword, but with one or more of the following suffixes:  ''_min'', ''_max'', and ''_sigma''.  

If only key_N_min and key_N_max are specified, then key for the Nth body will be generated from a uniform distribution between the minimum and maximum values.  

If key_N and key_N_sigma are specified, then key for the Nth body will be generated from a Gaussian distribution with mean key_N and standard deviation key_N_sigma.  If key_N_min and/or key_N_max are also specified, then the distribution will be truncated at these values.

If only key_N is specified, then key for the Nth body will be exactly the specified value. 

Other combinations of key suffixes are not allowed.

''time_init''::
   Initial time for all simulations.  Default value is 0.  
=======
These parameters varry from one program to the next.  Please see the
documentation for the specific program you are interested in.
>>>>>>> eford:docs/configuration_file.txt


[[anchor-4]]
STOPPER PRAMETERS
~~~~~~~~~~~~~~~~~
''rmax''::
   Integrations are halted once a body reaches a distance greater than ''rmax'' from the origin.  Currently this is only supported by euler (which you shouldn't use anyway), but is important for demonstratin how to write a basic stopper class.

[[anchor-5]]
OUTPUT PARAMETERS
~~~~~~~~~~~~~~~~~
''output''::
   Specifies files to be used for output.  If not specified, defaults to ''null'' which results in no output files being written.

<<<<<<< HEAD:docs/configuration_file.txt
=======
''output interval''::
   Specifies how often data should be logged.  


GPU CONTROL PARAMETERS
~~~~~~~~~~~~~~~~~~~~~~
>>>>>>> eford:docs/configuration_file.txt

''threads per block''::
   Specifies how many threads the GPU uses per block.  _We recommend most users not set this explicitly, except when performing performance benchmarks._  Default value is 64 in the current release, but future releases will likely choose a good value of this parameter automatically.



<<<<<<< HEAD:docs/configuration_file.txt
[[anchor-6]]
OUTPUT PARAMETERS
~~~~~~~~~~~~~~~~~

''output''::
   Specifies files to be used for output using the built-in logging.  In current demo, set this value to ''null''.  See *eventlog* for more information.

''output interval'':
   Specifies how often data should be logged for built-in logging.  _Only some integrators support this parameter at this time._ See *eventlog* for more information.

=======
>>>>>>> eford:docs/configuration_file.txt
EXAMPLE
-------

The exmample configuration file in `run/integrator.cfg` (shown below)
also contains an additional parameter ''initial conditions'' specific
to *swarm*.

[literal]
-----------------------------------------
initial conditions = data
integrator = gpu_hermite
runon = gpu
integration end = 1

# Integrator-specific parameters
time step = 0.001
precision = 1

# Output parameters
output = binary log.bin
output interval = 0.1
-----------------------------------------


LIMITATIONS & BUGS
------------------
See http://www.astro.ufl.edu/~eford/code/swarm/[website] for updated information on bugs.

RESOURCES
---------

Main web site: <http://www.astro.ufl.edu/~eford/code/swarm/>

Google Group: <http://groups.google.com/group/swarm-ng>


COPYING
-------
Copyright \(C) 2008-2010 Eric B. Ford. + 
Free use of this software is granted under the terms of the GNU General Public License (GPL) v3.

