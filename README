README for Swarm-NG
===================
Swarm-NG Development Team
v0.1, April 2010: Initial release + 
Swarm-NG v0.1 (c) Swarm-NG Development Team 2010

Introduction
------------

.What is Swarm-NG?  
Swarm-NG is a collection of code which to help
scientists and engineers harness the power of GPUs.  In the early
releases, Swarm-NG will focus on the integration of an ensemble of
N-body systems evolving under Newtonian gravity.  There are existing
libraries to perform the force calculation for large-N systems on
GPUs.  Swarm-NG does not replicate these, but rather focuses on
integrating an ensemble of many systems where N is small.  This is of
partiular interest for astronomers who study the chaotic evolution of
planetary systems.  In the long term, we hope Swarm-NG will allow for
the efficient parallel integration of user-defined systems of ordinary
differential equations.

.What is included in {revdate} release of Swarm-NG {revnumber}?
This initial release contains GPU-based integrators for few-body
systems, along with a draft of the public interface for setting
initial conditions, calling the GPU-based integration algorithms and
accessing the output data.  Small example programs are provided to
demonstrate functionality and how to program with Swarm-NG.

.Quick Start Tips

* Build the library and example programs.  See <<Building>> for an
  overview of key points or read
  link:build_system.html[build_system.html] for more info.

* Do a few quick tests with 'make test'.  See <<Testing>> for more info.

* See how much of a speedup you get with 'make benchmark'.  (Warning:
  This requires performing the integrations on both the CPU and GPU,
  so it can take a long time.  Please be patient.)

* To see how an end user can use 'swarm' as is:

** Take a look at the test 'test/swarm/swarm-run.test'.  If you run
   'make test', the output will be stored in
   'test-outputs/swarm/swarm-run.test/output.log'

** Read link:configuration_file.html[configuration_file.html]
   for a desription of the configuration file format and valid
   parameters for the 'bin/swarm' program.  (Some of the demos use a
   configuration file with the same format, but they may not accept
   all the parameters.)

** To see how end users can access data written by the swarm logging
   system, use 'swarmquery output_file'.  For info on options, run
   'swarmquery --help'

* To learn how to access the Swarm-NG library from you own code, work
  through the series of introductory tutorials in src/tutorials (in
  the following order).
. 'src/tutorials/swarm_tutorial_cpu.cpp': uses swarm library with CPU)
. 'src/tutorials/swarm_tutorial_gpu.cpp': uses swarm library with GPU
. 'src/tutorials/swarm_tutorial_compare.cpp': compares results from
GPU & CPU
. 'src/tutorials/swarm_tutorial_benchmark.cpp': compares performance
using GPU & CPU

. 'src/tutorials/swarm_tutorial_montecarlo.cpp': performs many n-body
integrations in Monte Carlo fashion in user-specified region of
parameter space.  This program uses a configuration file.  The format
is desribed in
link:swarm_tutorial_montecarlo.html[swarm_tutorial_montecarlo.html].

* To learn more from examplse of non-trivial codes, take a look at the following applications:
- 'src/scatter_demo/swarm_scatter_demo.cpp':  example that considers
  the effect of passing stars on planetary system.  More Info at link:swarm_scatter_demo.html
- ''src/swarm.cpp': this reads in an ensemble of initial conditions and
  writes output to binary files.  More information at link:swarm.html. The output can be easily accessed via the swarmquery program (see link:doc/swarmquery.html).

* To learn more about how developers an use the swarm library:

** Read link:for_developers.html[for_developers.html] for an
   overview of how to write your own programs which build on Swarm-NG
   functionality.

** Read link:eventlog.txt[eventlog.txt] and
   link:snapshotting.txt[do/snapshotting.txt] for info on using the
   swarm output system.


[[Building]]
Buliding the Swarm-NG Libraries and Demo Programs
--------------------------------------------------

[[Requirements]]
.What hardware & software is required to build & run Swarm-NG?
* Hardware

** Linux-based workstation (certain kernel versions?)

** nVidia GPU with G80 or G92 chip (we intend to support Fermi in near
   future)

* Software

** CUDA v2.3 and/or v3.0 

** g++ v?.? (later versions likely to work as well)

** Boost++ v?.? (later versions likely to work as well)

** Asciidoc & Doxygen (if you want to generate html documentation)

** Anything else?

.How do I build Swarm-NG for Linux? 

Run `make`.  Users can specify the paths to compiler, libaries, and
include files, as well as compiler flags in the file
''Makefile.user''.

.How do I build Swarm-NG for Windows? 

While we do not intend to support Swarm-NG for Windows, we can pass
along some of the following tips.

* We're told that following build environments for nvcc work on
  Windows using the The Microsoft Visual Studio compiler, cl, as the
  host compiler:
** Windows DOS shell
** Windows CygWin shells, use nvcc's drive prefix options.
** Windows MinGW shells, use nvcc's drive prefix options.

* Although a variety of POSIX style shells is supported on Windows,
  nvcc will still assume the Microsoft Visual Studio compiler for host
  compilation. Use of gcc is not supported on Windows.

* You can find more information from `/usr/local/cuda/doc/nvcc_3.0.pdf`

[[Testing]]
.How do I test Swarm-NG? 

`make test` + 

In the current release, small differences in floating point values can
result in 'failures' that are inconsequential.  So if the failures
occur, please take a look at the output file indicated to check
whether the difference is significant.

If so and you can not solve the problem, then run 'make feedback',
whih will generate a file named 'feedback.tgz' which we may request
that you send the developers.


Demo Programs 
~~~~~~~~~~~~~

.Commands to run demo codes
First, build the tutorials and demos with `make`.  Then, you can run
the following demos from the tutorial.

- swarm_tutorial_cpu:  run `bin/swarm_tutorial_cpu`

- swarm_tutorial_gpu:  run `bin/swarm_tutorial_gpu`

- swarm_tutorial_compare:  run `bin/swarm_tutorial_compare`

- swarm_tutorial_benchmark: run `bin/swarm_tutorial_benchmark`.
  Several options are avaliable.  run with the command line option
  --help for more info.

- swarm_tutorial_montecarlo: change into the run sub-directory and run
`../bin/swarm_tutorial_montecarlo integrator-tutorial_montecarlo.cfg`
The behavior of this tutorial can be easily adjusted by changing the
configuration file.  See
docs/swarm_tutorial_montecarlo.html[swarm_tutorial_montecarlo.html]
for details.

- swarm_scatter_demo: This requires multiple input files.  See
  link:swarm_scatter_demo.html[swarm_scatter_demo.html] for
  details.


Known Limitations and/or Bugs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- swarm is limited to N-body systems with 3-10 bodies.
- swarm only integrates forward in time.
- While there are euler and rk4 integrators, they are in a preliminary
  form and should not be used.
- E.g., rk4 requires exactly 3 bodies and does not include a cpu version
- For an updated list, visit the
  http://www.astro.ufl.edu/~eford/code/swarm/[Swarm-NG Website]

.What should I do if I think I found a compile-time bug?

- Please first check that you can successfully run `make test`.  If
  this fails, then please double check that you have the required
  drivers, libraries installed and paths set correctly.  You may need
  to create a Makefile.user to specify the path to your compilers,
  libraries, include files.  You may also need to specify the path to
  your cuda libraries via LD_LIBRARY_PATH.

- If the error arises while compiling the included tests, then run
  'make feedback', whih will generate a file named 'feedback.tgz'
  which we may request that you send us.

- Otherwise, please identify the minimal ammount of code that produces
  the compiler error.

- Contact Swarm-NG developers via the
  mailto:swarm-ng@googlegroups.com['Swarm-NG mailing list']

.What should I do if I think I found a run-time bug?

Unfortunately, GPUs can sometime get stuck in a problematic state,
particularly during code development and when not running in console
mode.  Before reporting a runtime bug, _please test the code
immediately after reboot your system into console mode_.

If the problem persists, then please check the archives of the
mailto:swarm-ng@googlegroups.com['Swarm-NG mailing list'] at the
http://groups.google.com/group/swarm-ng[Google Group for Swarm-NG] to
see if the bug has already been disussed.

If not, then please contact Swarm-NG developers via the
mailto:swarm-ng@googlegroups.com['Swarm-NG mailing list'].


Organization of Swarm-NG
~~~~~~~~~~~~~~~~~~~~~~~~

.Organization of documentation

In addition to this README.txt in the root directory, there are
several text files (ending in .txt or .man) in the *docs*
subdirectory. +

If you have asciidoc installed, then you can generate pretty html (or
other formats) with 'make doc-asciidoc'. +

While documenting source code is an ongoing projet, there is
significant inline documentation.  If you have doxygen installed, then
you can generate pretty html by running 'make doc-doxygen'. It places
output in the *reference* subdirectory.+

.Organization of executables

- All swarm executables and the swarm libary (libswarm.so) are placed in
the *bin* directory. +

- The *run* directory contains configuration files and is where swarm is
intended to be run from.

.Organization of source code
The main source code is in the *src* directory. +
Source code for the tutorials is in the *src/tutorials* directory. + 
Source code for the swarm_scatter_demo is in the *src/scatter_demo*
directory. +
Source code for the various integrators is in subdirectories of
*src/integrators*. +
Source code for the GPU logging system is in the *src/gpulog* directory. +
Various utilities are in *src/cux* and *src/astro*. +

.Other directories
The *scripts* directory has scripts needed for the build system, as
well as for generating initial conditions for some demo programs.  +

For more information on the organization of directories and files, see
link:organization.txt[organization.txt] and/or the
link:reference/html/files.html[doxygen files page].


Digging Deeper
~~~~~~~~~~~~~~
.Where can I find additional documentation?
There is additional documentation for various componets of Swarm-NG in
the docs subdirectory.  Most are written in asciidoc format.  To
generate html versions, run 'make doc-asciidoc'.+
After running 'make doc-doxygen', you can also browse the
link:reference/html/index.html[doxygen reference]. +

As the library interface solidifies, we anticipate providing
additional documention in future releases and/or at the
http://www.astro.ufl.edu/~eford/code/swarm/[Swarm-NG Website]

.How can I learn more about and/or contribute to the the Swarm-NG project?
- Visit the http://www.astro.ufl.edu/~eford/code/swarm/[Swarm-NG Website].

- Complete the http://astro.ufl.edu/~eford/code/swarm/[Swarm-NG User
  Questionnaire]

- Download, install and user Swarm-NG code (via link above)

- Read the archives of the mailto:swarm-ng@googlegroups.com['Swarm-NG
  mailing list'] at the http://groups.google.com/group/swarm-ng[Google
  Group for Swarm-NG].

- Join the http://groups.google.com/group/swarm-ng[Google Group for
  Swarm-NG] to sign up for announcements via the
  mailto:swarm-ng@googlegroups.com['Swarm-NG mailing list'].

- Contact Swarm-NG developers via the
  mailto:swarm-ng@googlegroups.com['Swarm-NG mailing list'].


Licensing, Citing, Acknowledgements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.Licensing Information

Swarm-NG v0.1 may be licensed under the GPL v3, avaliable
link:gpl-3.0.txt[here].

.Acknowledging use of Swarm-NG

When writing papers which made use of Swarm-NG, we strongly encourage
you to cite the technical paper descibing Swarm-NG.  We will provide a
citation as soon as a preprint of this paper is avaliable.  In the
mean time, please mention the
http://www.astro.ufl.edu/~eford/code/swarm/[Swarm-NG Website].

.Acknowledgements 

Swarm-NG is the product of a collaboration between astrophysicists (UF
Astronomy department and Harvard-Smithsonian Center for Astrophysics)
and UF computer scientists at Prof. Jorg Peter's
http://www.cise.ufl.edu/research/SurfLab/[SurfLab].  Contributors to
the Swarm-NG codebase include: Eric Ford, Ameya Gancchha, Jianwei Gao,
Mario Juric and Young In Yeo.  +

The Swarm-NG library includes code reused or adapted from:
- the http://www.nvidia.com/object/cuda_home_new.html[nVidia CUDA SDK], 
- the http://www.gnu.org/software/gsl/[GNU Science Library], 
- Sverre Aarseth's http://www.ast.cam.ac.uk/~sverre/web/pages/nbody.htm[hermit2
code], and 
- John Chamber's http://www.arm.ac.uk/~jec/home.html[Mercury
code], which builds on a long history of n-body integrators, including
Hal Levison and Martin Duncan's
http://www.boulder.swri.edu/~hal/swift.html[Swift code]. +

We greatfully acknowledge financial support from:
- the University of Florida's Research Opportunity Seed Fund, 
- the http://www.nsf.gov[National Science Foundation] (grant CCF-0728797), 
- NASA's http://www.stsci.edu/institute/org/spd/hubble-fellowship/hubble-fellow-overview[Hubble Fellowship program], and
- especially NASA's http://aisrp.nasa.gov/[Applied Information Systems
  Research Program] (grant NNX09AM41G).

We also acknowledge additional support from:
- the http://astro.ufl.edu/[University of Florida Astronomy Department], 
- UF's http://www.hpc.ufl.edu/[High Performance Computing Center], 
- the http://www.cfa.harvard.edu/[Harvard-Smithsonian Center for
  Astrophysics] and the http://www.cfa.harvard.edu/itc/[Institute for
  Theory and Computation],
- the http://sns.ias.edu/[Institute for Advanced Study], and
- http:://www.nvidia.com[nVidia Corporation].
